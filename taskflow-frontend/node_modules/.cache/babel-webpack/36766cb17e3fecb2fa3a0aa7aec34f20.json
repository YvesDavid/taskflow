{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet TaskListComponent = class TaskListComponent {\n  /**\r\n   * Injection du TaskService et du Router.\r\n   * - svc (service) : pour appeler getTasks(), deleteTask(), etc.\r\n   * - router : pour naviguer vers de nouvelles pages (création, édition, lecture)\r\n   */\n  constructor(svc, router) {\n    this.svc = svc;\n    this.router = router; // Tableau où on stockera les tâches récupérées depuis le back\n\n    this.tasks = []; //gestion des filtres\n\n    this.meta = {\n      page: 1,\n      limit: 10,\n      total: 0,\n      pages: 0\n    };\n    this.filter = {\n      sort: 'createdAt',\n      direction: 'DESC',\n      status: '',\n      q: ''\n    };\n  }\n  /**\r\n   * Méthode du cycle de vie Angular, appelée après le constructeur.\r\n   * On y déclenche le chargement initial de la liste de tâches.\r\n   */\n\n\n  ngOnInit() {\n    this.load();\n  }\n  /**\r\n  * Charge la liste des tâches depuis l’API.\r\n  * Subscribe() pour traiter la réponse asynchrone.\r\n  */\n\n\n  load(page = this.meta.page) {\n    this.svc.getTasks(Object.assign({\n      page,\n      limit: this.meta.limit\n    }, this.filter)).subscribe(({\n      data,\n      meta\n    }) => {\n      this.tasks = data;\n      this.meta = meta;\n    });\n  }\n  /** Méthode pour naviguer vers la création d’une nouvelle tâche\r\n   *\r\n   * Navigue vers la page de création d’une nouvelle tâche.\r\n   * Route configurée dans app-routing.module.ts : '/tasks/new'\r\n   */\n\n\n  newTask() {\n    this.router.navigate(['/tasks/new']);\n  }\n\n  read(id) {\n    this.router.navigate(['/tasks/read', id]);\n  }\n\n  edit(id) {\n    this.router.navigate(['/tasks/edit', id]);\n  }\n  /**\r\n   * Supprime la tâche via l’API, puis recharge la liste.\r\n   * On re-appelle load() pour mettre à jour l’interface.\r\n   */\n\n\n  delete(id) {\n    this.svc.deleteTask(id).subscribe(() => this.load());\n  }\n\n};\nTaskListComponent = __decorate([Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.scss']\n})], TaskListComponent);\nexport { TaskListComponent };","map":{"version":3,"sources":["C:/xampp/htdocs/taskflow/taskflow-frontend/src/app/components/task-list/task-list.component.ts"],"names":["__decorate","Component","TaskListComponent","constructor","svc","router","tasks","meta","page","limit","total","pages","filter","sort","direction","status","q","ngOnInit","load","getTasks","Object","assign","subscribe","data","newTask","navigate","read","id","edit","delete","deleteTask","selector","templateUrl","styleUrls"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,IAAIC,iBAAiB,GAAG,MAAMA,iBAAN,CAAwB;AAC5C;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAc;AACrB,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcA,MAAd,CAFqB,CAGrB;;AACA,SAAKC,KAAL,GAAa,EAAb,CAJqB,CAKrB;;AACA,SAAKC,IAAL,GAAY;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,KAAK,EAAE,CAA7B;AAAgCC,MAAAA,KAAK,EAAE;AAAvC,KAAZ;AACA,SAAKC,MAAL,GAAc;AAAEC,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,SAAS,EAAE,MAAhC;AAAwCC,MAAAA,MAAM,EAAE,EAAhD;AAAoDC,MAAAA,CAAC,EAAE;AAAvD,KAAd;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,SAAKC,IAAL;AACH;AACD;AACJ;AACA;AACA;;;AACIA,EAAAA,IAAI,CAACV,IAAI,GAAG,KAAKD,IAAL,CAAUC,IAAlB,EAAwB;AACxB,SAAKJ,GAAL,CAASe,QAAT,CAAkBC,MAAM,CAACC,MAAP,CAAc;AAAEb,MAAAA,IAAF;AAAQC,MAAAA,KAAK,EAAE,KAAKF,IAAL,CAAUE;AAAzB,KAAd,EAAgD,KAAKG,MAArD,CAAlB,EACKU,SADL,CACe,CAAC;AAAEC,MAAAA,IAAF;AAAQhB,MAAAA;AAAR,KAAD,KAAoB;AAC/B,WAAKD,KAAL,GAAaiB,IAAb;AACA,WAAKhB,IAAL,GAAYA,IAAZ;AACH,KAJD;AAKH;AACD;AACJ;AACA;AACA;AACA;;;AACIiB,EAAAA,OAAO,GAAG;AACN,SAAKnB,MAAL,CAAYoB,QAAZ,CAAqB,CAAC,YAAD,CAArB;AACH;;AACDC,EAAAA,IAAI,CAACC,EAAD,EAAK;AACL,SAAKtB,MAAL,CAAYoB,QAAZ,CAAqB,CAAC,aAAD,EAAgBE,EAAhB,CAArB;AACH;;AACDC,EAAAA,IAAI,CAACD,EAAD,EAAK;AACL,SAAKtB,MAAL,CAAYoB,QAAZ,CAAqB,CAAC,aAAD,EAAgBE,EAAhB,CAArB;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,MAAM,CAACF,EAAD,EAAK;AACP,SAAKvB,GAAL,CAAS0B,UAAT,CAAoBH,EAApB,EAAwBL,SAAxB,CAAkC,MAAM,KAAKJ,IAAL,EAAxC;AACH;;AArD2C,CAAhD;AAuDAhB,iBAAiB,GAAGF,UAAU,CAAC,CAC3BC,SAAS,CAAC;AACN8B,EAAAA,QAAQ,EAAE,eADJ;AAENC,EAAAA,WAAW,EAAE,4BAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,4BAAD;AAHL,CAAD,CADkB,CAAD,EAM3B/B,iBAN2B,CAA9B;AAOA,SAASA,iBAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nlet TaskListComponent = class TaskListComponent {\r\n    /**\r\n     * Injection du TaskService et du Router.\r\n     * - svc (service) : pour appeler getTasks(), deleteTask(), etc.\r\n     * - router : pour naviguer vers de nouvelles pages (création, édition, lecture)\r\n     */\r\n    constructor(svc, router) {\r\n        this.svc = svc;\r\n        this.router = router;\r\n        // Tableau où on stockera les tâches récupérées depuis le back\r\n        this.tasks = [];\r\n        //gestion des filtres\r\n        this.meta = { page: 1, limit: 10, total: 0, pages: 0 };\r\n        this.filter = { sort: 'createdAt', direction: 'DESC', status: '', q: '' };\r\n    }\r\n    /**\r\n     * Méthode du cycle de vie Angular, appelée après le constructeur.\r\n     * On y déclenche le chargement initial de la liste de tâches.\r\n     */\r\n    ngOnInit() {\r\n        this.load();\r\n    }\r\n    /**\r\n    * Charge la liste des tâches depuis l’API.\r\n    * Subscribe() pour traiter la réponse asynchrone.\r\n    */\r\n    load(page = this.meta.page) {\r\n        this.svc.getTasks(Object.assign({ page, limit: this.meta.limit }, this.filter))\r\n            .subscribe(({ data, meta }) => {\r\n            this.tasks = data;\r\n            this.meta = meta;\r\n        });\r\n    }\r\n    /** Méthode pour naviguer vers la création d’une nouvelle tâche\r\n     *\r\n     * Navigue vers la page de création d’une nouvelle tâche.\r\n     * Route configurée dans app-routing.module.ts : '/tasks/new'\r\n     */\r\n    newTask() {\r\n        this.router.navigate(['/tasks/new']);\r\n    }\r\n    read(id) {\r\n        this.router.navigate(['/tasks/read', id]);\r\n    }\r\n    edit(id) {\r\n        this.router.navigate(['/tasks/edit', id]);\r\n    }\r\n    /**\r\n     * Supprime la tâche via l’API, puis recharge la liste.\r\n     * On re-appelle load() pour mettre à jour l’interface.\r\n     */\r\n    delete(id) {\r\n        this.svc.deleteTask(id).subscribe(() => this.load());\r\n    }\r\n};\r\nTaskListComponent = __decorate([\r\n    Component({\r\n        selector: 'app-task-list',\r\n        templateUrl: './task-list.component.html',\r\n        styleUrls: ['./task-list.component.scss']\r\n    })\r\n], TaskListComponent);\r\nexport { TaskListComponent };\r\n"]},"metadata":{},"sourceType":"module"}