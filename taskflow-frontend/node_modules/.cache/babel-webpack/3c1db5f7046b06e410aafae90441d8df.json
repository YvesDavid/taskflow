{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/task.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n\nfunction TaskListComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_li_6_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const t_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.read(t_r1.id);\n    });\n    i0.ɵɵtext(5, \"voir\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_li_6_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const t_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.edit(t_r1.id);\n    });\n    i0.ɵɵtext(7, \"\\u270F\\uFE0F\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_li_6_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const t_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.delete(t_r1.id);\n    });\n    i0.ɵɵtext(9, \"\\uD83D\\uDDD1\\uFE0F\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const t_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(t_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \\u2014 \", t_r1.status, \" \");\n  }\n}\n\nexport class TaskListComponent {\n  /**\r\n   * Injection du TaskService et du Router.\r\n   * - svc : pour appeler getTasks(), deleteTask(), etc.\r\n   * - router : pour naviguer vers de nouvelles pages (création, édition, lecture)\r\n   */\n  constructor(svc, router) {\n    this.svc = svc;\n    this.router = router; // Tableau où on stockera les tâches récupérées depuis le back\n\n    this.tasks = [];\n  }\n  /**\r\n   * Méthode du cycle de vie Angular, appelée après le constructeur.\r\n   * On y déclenche le chargement initial de la liste de tâches.\r\n   */\n\n\n  ngOnInit() {\n    this.load();\n  }\n  /**\r\n  * Charge la liste des tâches depuis l’API.\r\n  * Subscribe() pour traiter la réponse asynchrone.\r\n  */\n\n\n  load() {\n    this.svc.getTasks().subscribe(data => this.tasks = data);\n  }\n  /** Méthode pour naviguer vers la création d’une nouvelle tâche\r\n   *\r\n   * Navigue vers la page de création d’une nouvelle tâche.\r\n   * Route configurée dans app-routing.module.ts : '/tasks/new'\r\n   */\n\n\n  newTask() {\n    this.router.navigate(['/tasks/new']);\n  }\n\n  read(id) {\n    this.router.navigate(['/tasks/read', id]);\n  }\n\n  edit(id) {\n    this.router.navigate(['/tasks/edit', id]);\n  }\n  /**\r\n   * Supprime la tâche via l’API, puis recharge la liste.\r\n   * On re-appelle load() pour mettre à jour l’interface.\r\n   */\n\n\n  delete(id) {\n    this.svc.deleteTask(id).subscribe(() => this.load());\n  }\n\n}\n\nTaskListComponent.ɵfac = function TaskListComponent_Factory(t) {\n  return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nTaskListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskListComponent,\n  selectors: [[\"app-task-list\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[1, \"task-list\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function TaskListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"h2\");\n      i0.ɵɵtext(2, \"Mes t\\u00E2ches\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_3_listener() {\n        return ctx.newTask();\n      });\n      i0.ɵɵtext(4, \"Nouvelle t\\u00E2che\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ul\");\n      i0.ɵɵtemplate(6, TaskListComponent_li_6_Template, 10, 2, \"li\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n    }\n  },\n  directives: [i3.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YXNrLWxpc3QuY29tcG9uZW50LnNjc3MifQ== */\"]\n});","map":{"version":3,"sources":["C:/xampp/htdocs/taskflow/taskflow-frontend/src/app/components/task-list/task-list.component.ts"],"names":["i0","i1","i2","i3","TaskListComponent_li_6_Template","rf","ctx","_r3","ɵɵgetCurrentView","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TaskListComponent_li_6_Template_button_click_4_listener","restoredCtx","ɵɵrestoreView","t_r1","$implicit","ctx_r2","ɵɵnextContext","read","id","TaskListComponent_li_6_Template_button_click_6_listener","ctx_r4","edit","TaskListComponent_li_6_Template_button_click_8_listener","ctx_r5","delete","ɵɵadvance","ɵɵtextInterpolate","title","ɵɵtextInterpolate1","status","TaskListComponent","constructor","svc","router","tasks","ngOnInit","load","getTasks","subscribe","data","newTask","navigate","deleteTask","ɵfac","TaskListComponent_Factory","t","ɵɵdirectiveInject","TaskService","Router","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TaskListComponent_Template","TaskListComponent_Template_button_click_3_listener","ɵɵtemplate","ɵɵproperty","directives","NgForOf","styles"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../../services/task.service\";\r\nimport * as i2 from \"@angular/router\";\r\nimport * as i3 from \"@angular/common\";\r\nfunction TaskListComponent_li_6_Template(rf, ctx) { if (rf & 1) {\r\n    const _r3 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementStart(0, \"li\");\r\n    i0.ɵɵelementStart(1, \"strong\");\r\n    i0.ɵɵtext(2);\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵtext(3);\r\n    i0.ɵɵelementStart(4, \"button\", 1);\r\n    i0.ɵɵlistener(\"click\", function TaskListComponent_li_6_Template_button_click_4_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const t_r1 = restoredCtx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.read(t_r1.id); });\r\n    i0.ɵɵtext(5, \"voir\");\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementStart(6, \"button\", 1);\r\n    i0.ɵɵlistener(\"click\", function TaskListComponent_li_6_Template_button_click_6_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const t_r1 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.edit(t_r1.id); });\r\n    i0.ɵɵtext(7, \"\\u270F\\uFE0F\");\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementStart(8, \"button\", 1);\r\n    i0.ɵɵlistener(\"click\", function TaskListComponent_li_6_Template_button_click_8_listener() { const restoredCtx = i0.ɵɵrestoreView(_r3); const t_r1 = restoredCtx.$implicit; const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.delete(t_r1.id); });\r\n    i0.ɵɵtext(9, \"\\uD83D\\uDDD1\\uFE0F\");\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const t_r1 = ctx.$implicit;\r\n    i0.ɵɵadvance(2);\r\n    i0.ɵɵtextInterpolate(t_r1.title);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate1(\" \\u2014 \", t_r1.status, \" \");\r\n} }\r\nexport class TaskListComponent {\r\n    /**\r\n     * Injection du TaskService et du Router.\r\n     * - svc : pour appeler getTasks(), deleteTask(), etc.\r\n     * - router : pour naviguer vers de nouvelles pages (création, édition, lecture)\r\n     */\r\n    constructor(svc, router) {\r\n        this.svc = svc;\r\n        this.router = router;\r\n        // Tableau où on stockera les tâches récupérées depuis le back\r\n        this.tasks = [];\r\n    }\r\n    /**\r\n     * Méthode du cycle de vie Angular, appelée après le constructeur.\r\n     * On y déclenche le chargement initial de la liste de tâches.\r\n     */\r\n    ngOnInit() {\r\n        this.load();\r\n    }\r\n    /**\r\n    * Charge la liste des tâches depuis l’API.\r\n    * Subscribe() pour traiter la réponse asynchrone.\r\n    */\r\n    load() {\r\n        this.svc.getTasks().subscribe(data => this.tasks = data);\r\n    }\r\n    /** Méthode pour naviguer vers la création d’une nouvelle tâche\r\n     *\r\n     * Navigue vers la page de création d’une nouvelle tâche.\r\n     * Route configurée dans app-routing.module.ts : '/tasks/new'\r\n     */\r\n    newTask() {\r\n        this.router.navigate(['/tasks/new']);\r\n    }\r\n    read(id) {\r\n        this.router.navigate(['/tasks/read', id]);\r\n    }\r\n    edit(id) {\r\n        this.router.navigate(['/tasks/edit', id]);\r\n    }\r\n    /**\r\n     * Supprime la tâche via l’API, puis recharge la liste.\r\n     * On re-appelle load() pour mettre à jour l’interface.\r\n     */\r\n    delete(id) {\r\n        this.svc.deleteTask(id).subscribe(() => this.load());\r\n    }\r\n}\r\nTaskListComponent.ɵfac = function TaskListComponent_Factory(t) { return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.Router)); };\r\nTaskListComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TaskListComponent, selectors: [[\"app-task-list\"]], decls: 7, vars: 1, consts: [[1, \"task-list\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"]], template: function TaskListComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵelementStart(1, \"h2\");\r\n        i0.ɵɵtext(2, \"Mes t\\u00E2ches\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(3, \"button\", 1);\r\n        i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_3_listener() { return ctx.newTask(); });\r\n        i0.ɵɵtext(4, \"Nouvelle t\\u00E2che\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(5, \"ul\");\r\n        i0.ɵɵtemplate(6, TaskListComponent_li_6_Template, 10, 2, \"li\", 2);\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(6);\r\n        i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\r\n    } }, directives: [i3.NgForOf], styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0YXNrLWxpc3QuY29tcG9uZW50LnNjc3MifQ== */\"] });\r\n"]},"metadata":{},"sourceType":"module"}